name: Playwright BDD Tests
# Trigger workflow run - updated on user request

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    # Manual trigger

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Add timeout to prevent stuck jobs
    permissions:
      contents: write
      pages: write
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
      
      - name: Install npm dependencies only
        run: npm install --ignore-scripts --no-package-lock
        timeout-minutes: 5
      
      - name: Install minimal browser
        run: npx playwright install chromium --with-deps
        timeout-minutes: 3
      
      - name: Create .env file
        run: |
          echo "BROWSER=chromium" >> .env
          echo "HEADLESS=true" >> .env
          echo "BASE_URL=https://www.saucedemo.com" >> .env
          echo "STANDARD_USER=standard_user" >> .env
          echo "PASSWORD=secret_sauce" >> .env
          cat .env
      
      - name: Create required directories
        run: |
          mkdir -p test-results/screenshots
          mkdir -p test-results/videos
          mkdir -p allure-results
      
      - name: Run tests with Allure reporting
        id: run_tests
        run: |
          npm run prepare:allure
          npx cucumber-js || true
          
          # Extract test statistics from Allure results
          echo "Parsing test results..."
          
          # Initialize counters
          TOTAL_TESTS=0
          PASSED_TESTS=0
          FAILED_TESTS=0
          SKIPPED_TESTS=0
          
          # Count test results if directory exists
          if [ -d "allure-results" ]; then
            # Get a list of all test files (excluding metadata files)
            TEST_FILES=$(find allure-results -name "*.json" -not -name "categories.json" -not -name "executor.json" -not -name "environment.properties")
            
            # Count total test cases
            TOTAL_TESTS=$(echo "$TEST_FILES" | wc -l)
            
            # Count each type of test result
            PASSED_TESTS=$(grep -l '"status":"passed"' allure-results/*.json 2>/dev/null | wc -l || echo 0)
            FAILED_TESTS=$(grep -l '"status":"failed"' allure-results/*.json 2>/dev/null | wc -l || echo 0)
            SKIPPED_TESTS=$(grep -l '"status":"skipped"' allure-results/*.json 2>/dev/null | wc -l || echo 0)
          fi
          
          # Determine overall test status
          if [ "$FAILED_TESTS" -gt 0 ]; then
            TEST_STATUS="❌ FAILED"
          elif [ "$TOTAL_TESTS" -eq 0 ]; then
            TEST_STATUS="⚠️ NO TESTS RUN"
          else
            TEST_STATUS="✅ PASSED"
          fi
          
          # Store values directly in GitHub environment variables
          echo "TOTAL_TESTS=$TOTAL_TESTS" >> $GITHUB_ENV
          echo "PASSED_TESTS=$PASSED_TESTS" >> $GITHUB_ENV
          echo "FAILED_TESTS=$FAILED_TESTS" >> $GITHUB_ENV
          echo "SKIPPED_TESTS=$SKIPPED_TESTS" >> $GITHUB_ENV
          echo "TEST_STATUS=$TEST_STATUS" >> $GITHUB_ENV
          
          # Also set outputs for this step
          echo "total=$TOTAL_TESTS" >> $GITHUB_OUTPUT
          echo "passed=$PASSED_TESTS" >> $GITHUB_OUTPUT
          echo "failed=$FAILED_TESTS" >> $GITHUB_OUTPUT
          echo "skipped=$SKIPPED_TESTS" >> $GITHUB_OUTPUT
          echo "status=$TEST_STATUS" >> $GITHUB_OUTPUT
          
          echo "Test Statistics: Total: $TOTAL_TESTS, Passed: $PASSED_TESTS, Failed: $FAILED_TESTS, Skipped: $SKIPPED_TESTS, Status: $TEST_STATUS"
        timeout-minutes: 5
      
      - name: Generate Allure report (without server)
        run: |
          # Generate adapter without browser opening
          node src/utils/cucumber-allure-adapter.js || true
          
          # Just generate the report without starting server
          echo "Generating Allure report without starting server..."
          npx allure generate allure-results -o allure-report --clean
        timeout-minutes: 2
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            test-results
            allure-results
            allure-report
          retention-days: 7
      
      - name: Deploy report to GitHub Pages
        if: always()
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_branch: gh-pages
          publish_dir: ./allure-report
      
      - name: Wait for report to be published
        if: always()
        run: |
          echo "Waiting for 3 minutes to ensure test results are fully processed..."
          sleep 180
      
      - name: Prepare test stats for Slack
        if: always()
        id: prepare_stats
        run: |
          # Just echo environment variables to GitHub outputs
          echo "total=${TOTAL_TESTS:-0}" >> $GITHUB_OUTPUT
          echo "passed=${PASSED_TESTS:-0}" >> $GITHUB_OUTPUT
          echo "failed=${FAILED_TESTS:-0}" >> $GITHUB_OUTPUT
          echo "skipped=${SKIPPED_TESTS:-0}" >> $GITHUB_OUTPUT
          echo "status=${TEST_STATUS:-⚠️ UNKNOWN}" >> $GITHUB_OUTPUT
          
          echo "Test stats prepared for Slack: Total: ${TOTAL_TESTS:-0}, Passed: ${PASSED_TESTS:-0}, Failed: ${FAILED_TESTS:-0}, Skipped: ${SKIPPED_TESTS:-0}, Status: ${TEST_STATUS:-⚠️ UNKNOWN}"
          
      - name: Send notification to Slack
        if: always()
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          author_name: 'Playwright BDD Tests'
          fields: repo,message,commit,author,action,workflow,job,took
          mention: 'here'
          if_mention: failure
          text: |
            *Test Results: ${{ job.status }}*
            *Test Execution Status: ${{ steps.prepare_stats.outputs.status || '⚠️ UNKNOWN' }}*
            *Repository:* ${{ github.repository }}
            *Test Statistics:*
            • Total Tests: ${{ steps.prepare_stats.outputs.total || '0' }}
            • Passed: ${{ steps.prepare_stats.outputs.passed || '0' }} ✅
            • Failed: ${{ steps.prepare_stats.outputs.failed || '0' }} ❌
            • Skipped: ${{ steps.prepare_stats.outputs.skipped || '0' }} ⏭️
            *Allure Report:* https://rrendon2025.github.io/playwright-BDD/
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }} 